[{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"temporal development software studied many decades, commonly development individual pieces software , rarer cases, comparative studies select pieces software (see comprehensive literature reviews Syeed, Hammouda, Syatä 2013; Chahal Saini 2016). Open source software many languages nevertheless increasingly dependent upon therefore shaped developments packages libraries. computer language associated evolving ecosystem software, evolution one component ecosystem best studied context evolution ecosystem whole. short, development evolution open source software better studied collective rather individual terms. One focal point historically individual studies software evolution work Lehman et al. (1997), expressed findings series “laws” software evolution. “laws” include , time, software increases complexity functional content (numbers “modules”). laws growth derive Turski (1996), posited inverse-square law software growth, later formalised Turski (2002), albeit purely empirical exercise absent firm theoretical reasoning. “laws” software evolution nevertheless frequently used cited (see overview Mens 2008, references therein), strongly influenced development research field might referred “Software Mining Analytics”, particularly focussed elucidating useful predictors software quality. useful overview field provided Allamanis Sutton (2013), empirically identified number research categories within broad field, including one “code statistics” describes present research. many computer languages, individual pieces open-source software – hereafter referred “packages” – held distributed centralised package distribution services (Ovens 2018), manifest forms collective “evolution” beyond evolution individual packages. Package distribution services serve curated repositories independently-contributed software, exist computer languages including python (Harihareswara 2018), LaTeX (“CTAN” 2021), JavaScript (Goldwater 2020), many others (well operating-system specific package distribution services described Debian Policy Editors 2021). Package distribution services analysed compared terms static collective properties (example, Decan, Mens, Claes 2016), well temporal evolution, notable example Decan, Mens, Grosjean (2019), examined evolution dependency networks seven package distribution systems, including “Comprehensive R Archive Network”, CRAN, focus present study. Decan, Mens, Grosjean (2019) observed numbers packages numbers dependencies increased slowly CRAN systems considered, numbers package updates. also observed “survival probability” (package updated given time) far greater CRAN package ecosystems, albeit differences observed packages required imported packages, . Finally, observed Gini coefficient inequality dependent packages also increased time systems. total size systems studied Decan, Mens, Claes (2016) Decan, Mens, Grosjean (2019) nevertheless left relatively little scope detailed examinations properties packages , leaving analyses focussed aggregate properties dependency networks. also detailed considerations dependency networks individual package distribution systems, analyses Debian network Gonzalez-Barahona et al. (2009), revealed progressive increases package inter-dependencies. Although observed increases sizes packages time, claimed reflected laws Lehman et al. (1997), neither quantified modelled actual rates change. also observed relative sizes packages, measured terms lines code, remained relatively stable across releases. recent analysis “pypi” (Python Package Index) package distribution system python (Bommarito Bommarito 2019) represented comprehensive analysis time single package distribution system computer language, drawn almost two million releases 179,000 packages. size pypi necessarily restricted analyses package metadata, although single metrics package size also included. Moreover, size pypi meant analyses dependency networks also restricted aggregate statistics , analyses internal properties dependency networks . Thus represents exemplary study evolution package distribution system, size system precluded analyses individual pieces software evolve internally, relation aggregate evolution system whole. primary aim present work examine mutual evolutionary dynamics collective properties one package distribution system properties individual software packages within system. Detailed examination co-evolution entire software system along evolutionary trajectories individual components requires package distribution system relatively modest size, one retains full archives previous packages. One package distribution system fulfils criteria CRAN, Comprehensive R Archive Network, around one tenth size pypi, although still amounting 100,000 releases around 20,000 packages. CRAN far dominant package distribution system R; systems BioConductor R-Forge considered elsewhere (Decan et al. 2015), present work focusses exclusively CRAN. work builds several prior analysis CRAN packages. Perhaps notably, present article prepared ten years Hornik (2012) first published article commemorating “early history R project” ten years prior . 2012 article, Kurt Hornik, one instigators CRAN, calls , considerable concerted community effort … providing R packages compute R packages. referring context specifically textual analyses documentation files, perceived absence resources “compute packages” arguably remains largely true ten years later. analyses CRAN software system considered might referred “metadata”, personal networks package authors (Plakidas, Schall, Zdun 2017), relationships CRAN software development platforms GitHub (Decan et al. 2015, 2016). Analyses considered individual packages also mostly examined simplified aggregate data sizes packages (German, Adams, Hassan 2013), dependency networks packages (Mora-Cantallops, Sánchez-Alonso, García-Barriocanal 2020). present work aims extend beyond analyses, reporting tool able derive detailed data internal structure every package ever existed CRAN, relate detailed package-internal data extrinsic evolution system whole. begin describing {pkgstats} R package, can used generate analyse properties R package code, accompanying database code statistics historical CRAN packages. describe trends CRAN package properties history archive (1998-2021), focussing trends four areas: Package metadata (licenses, authorship, translation), internal content structure (file function types sizes), intra-package code structure (function call networks), finally, dependency networks amongst packages. Finally, discuss implications likely drivers trends, potential applications extensions {pkgstats} package database.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"developed {pkgstats} quantify structure content R packages using static code analysis techniques (Papamichail, Diamantopoulos, Symeonidis 2016). package includes function, pkgstats_from_archive, can applied local mirror CRAN archive collate statistics packages. resultant data published v0.0.3 release {pkgstats} package. results follow used pkgstats-CRAN-data, contain one row package ever published CRAN (total 105,375 rows), 91 column-wise variables quantifying qualifying many aspects package, described following sub-sections. methodological description begins overview structure CRAN archive data extracted, followed description two open-source libraries “code tagging” used {pkgstats} package. describe results generated package , providing details statistical analyses used derive results.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"data-r-packages-and-the-cran-server","dir":"Articles","previous_headings":"Methods","what":"Data: R packages and the CRAN server","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"primary data source comprised every version every R package hosted “Comprehensive R Archive Network” CRAN, centralised distribution system R packages. R language defined single “package” referred “base R”. default, installations R also include suite “recommended” packages. packages referred “Contributed Packages”. number following results distinguish three categories base, recommended, contributed packages (German, Adams, Hassan 2013). CRAN currently holds close 19,000 contributed packages, also maintains complete archive previous versions packages, including archived packages longer available CRAN. data analysed generated local mirror entire CRAN repository, including current archived versions packages, amounting around 105,000 individual versions (average slightly 5 releases per package). raw data analyses contributed packages . relationships objects (functions) base contributed packages considered, structures base recommended packages analysed . R packages must accord structure defined “Writing R Extensions” Manual (discussed Hornik 2012). Many aspects following analyses applied different components R packages, particular following main sub-directories: /R directory holds source files R language; /src directory holds code languages needs compiled package installation; /inst directory generally holds bundles external code, may also include code used cross-linking compilation, including packages. Cross-linked code must /inst/include sub-directory (explained section “Writing R Extensions” Manual). following analyses consider /inst/include directory, references /inst directory imply sub-directory . Analyses excluded sub-directories within /inst directory. /vignettes directory includes extended documentation. (documentation may also placed /inst/doc folder, ignored .) /tests directory containing test files. /data directory containing data files used implement demonstrate package functionality. results follow also distinguish two main kinds R functions: Exported functions intended called users package; Non-exported functions intended called internally functions package.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"code-tagging-with-ctags-and-gtags","dir":"Articles","previous_headings":"Methods","what":"Code tagging with “ctags” and “gtags”","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"{pkgstats} package static code analysis tool specifically developed R packages, much functionality extending two general static analysis tools. Static code analysis tools generally work constructing parse trees relate grammar describing one computer languages expression encountered tracing code. important first step “tag” expression, identifying kind expression scope, generally implying membership either component underlying grammar, local scope definitions within locally-sourced files. {pkgstats} uses two open-source libraries code tagging parse tree construction: “ctags” “gtags”. original “ctags” library longer maintained, analyses used maintained version called “Universal ctags” , generates index (tag) file language objects found source files programming languages. library used tag expression R, src, inst/include directories, providing following data tagged item: tag , name function, variable, object; name path corresponding file; full content expression tag used (text string); kind object (R files, generally function, functionVar variable defined within function, globalVar global variables, objects defined R language; kinds objects can arbitrarily diverse languages); computer language object referenced; start end line numbers file object defined referenced. “ctags” data R files also used construct “external call network” references R functions packages, including package analysed, base recommended packages, contributed packages imported package. Functions attributed packages matching function names. Function names R unique, “namespace conflicts” may arise packages implementing different functions name. presumed namespace conflicts commonly arise re-definitions functions initially defined base recommended packages, cases attributed function external contributed package definitions base recommended packages. “gtags” library, part GNU Global library, generates entries every expression, “tag” defining environment expression. enables mappings made every expression corresponding tag. used “gtags” construct object reference networks across computer languages used R packages (C, C++, Python), enable construction “function call networks” within languages. terms “functions” “calls” may appropriate computer languages /classes types objects, nevertheless reflect functionality R code, preferred , even referring object relationships class inheritance mechanisms. possible cross-compile “gtags” “ctags”, enable “gtags” use expansive language parsing abilities “ctags”, greatly extend range languages able parsed “gtags”. particular, “gtags” default parse R code, yet cross-compiled Universal “ctags”. Cross-compiled installations “gtags” , however, generally several times slower simpler installations, analyses use cross-compiled version. meant restricting analyses smaller subset potential languages, output “ctags” nevertheless describes tags possible languages, “gtags” used map function call networks languages R. Function-call networks within R extracted “ctags” output described , one additional function written {pkgstats} package link calls within R code defined “ctags” output external objects defined languages specified “gtags” output. enabled full function-call networks constructed within different languages used R packages. Data generated “ctags” “gtags” analysed included: Numbers internal external functions R. Numbers kinds objects languages. Numbers Lines--Code function object definition language. References function (object) made functions (objects), including references made functions defined base, recommended, contributed R packages.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"the-pkgstats-package","dir":"Articles","previous_headings":"Methods","what":"The pkgstats package","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"sub-section describes additional data generated {pkgstats} beyond extracted “ctags” “gtags”. full list data generated package given online documentation, sub-section describing aspects analysed .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"description-files","dir":"Articles","previous_headings":"Methods > The pkgstats package","what":"‘DESCRIPTION’ files","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"R packages must include Debian Control File (“DCF”) called “DESCRIPTION” (Hornik 2012) contains subset standard DCF fields, including number standardised mandatory fields able analysed . extracted: Numbers authors (individuals specified role “aut”); Numbers contributors (individuals specified role “ctb”); Full entries “License” field specifying type license software released; Entries “URL” field specifying one Uniform Resource Locators (URLs) package. Lists imported packages used construct dependency networks packages. (Neither required suggested packages considered .)","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"translation-files","dir":"Articles","previous_headings":"Methods > The pkgstats package","what":"Translation files","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"R packages may include files used translate messages issued code (human) languages. files placed dedicated /po sub-directory, file names prefixed standard prefixes (generally, necessarily, ISO 639-1 codes). format enables translations readily identified extracted. {pkgstats} extracts list translations provided package.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"lines-of-code-loc","dir":"Articles","previous_headings":"Methods > The pkgstats package","what":"Lines of Code (LoC)","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"{pkgstats} includes internal tool (coded C++) counting Lines--Code (Loc). tool produces output similar many common LoC tools, additional data : Total numbers code, comment, blank lines; Total numbers characters code lines, along total numbers white-space characters, enable metrics proportional white space; Code indentation, including identification tab-indentation. white-space indentation metrics developed enable quantification aspects code outlay design.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"function-level-analyses","dir":"Articles","previous_headings":"Methods > The pkgstats package","what":"Function-level analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"“ctags” “gtags” output described provides data start end points function definition, along names associated files. data used provide estimates average LoC per function, numbers function definitions per file. (, explained , “function” used generic label object language, class definitions.) exported function R package must corresponding documentation file /man directory package suffix, .Rd “R documentation”. {pkgstats} also statically parses files parse_Rd function recommended {tools} package. present analyses, enabled identification number parameters function, number documentation characters parameter. Total length documentation function also quantified number lines output produced converting result parse_Rd text (via tools::Rd2txt function).","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"network-analyses","dir":"Articles","previous_headings":"Methods","what":"Network Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Two distinct kinds network analyses performed : inter-package analyses dependency networks packages (akin Decan, Mens, Grosjean 2019), intra-package analyses function call networks extracted “ctags” “gtags” data described .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"inter-package-network-analyses","dir":"Articles","previous_headings":"Methods > Network Analyses","what":"Inter-Package Network Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"‘DESCRIPTION’ files R packages must specify external packages package imports. data can used construct full dependency network packages. results present following measures derived package dependency networks, calculated igraph package (Csardi Nepusz 2006). Numbers packages imported others - terminal vertices dependency network; Average “-degree” network vertices, average numbers times package imported others; average betweenness centrality edge, number times edge traversed connecting every package every package network; network-level degree centrality, measure vertex degree standardised overall size structure network (Freeman 1978). measure overall “size” network average distance pairs vertices. Betweenness centrality provides insight centralised network , higher values reflecting networks connections frequently traverse common, central region. network-level degree centrality reflects extent vertices relatively high -degree; networks networks equal -degree effective centre, degree centrality zero. contrast, networks highly-connected central vertices many vertices low -degree high degree centrality. two centrality metrics provide slightly different insights: betweenness centrality increase extent network manifests single, common centre; degree centrality increase extent networks become centralised general, regardless whether singly identifiable centre forms. Networks low degree centrality readily traversable, generally lower average distances pairs vertices. distance metric nevertheless may offer additional insight, example higher independent degree centrality networks extended peripheral connections. Finally, note clusters local network communities considered , dependency networks CRAN packages almost always highly connected largest connected cluster represents 99% network.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"intra-package-network-analyses","dir":"Articles","previous_headings":"Methods > Network Analyses","what":"Intra-Package Network Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Intra-package networks constructed function call networks described , included overall package networks connecting code sub-directories, well network analyses components representing individual sub-directories, constrained network analyses /R /src code. Function call networks within individual packages commonly structured several distinct clusters, thus numbers clusters provided important first metric intra-package analyses. Intra-package analyses considered following metrics: Ratio numbers edges numbers vertices. Numbers distinct clusters functions objects across languages. betweenness centrality function call network. Numbers terminal vertices (functions call functions). average vertex degree.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"coupling-instability","dir":"Articles","previous_headings":"Methods","what":"Coupling Instability","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Coupling Instability important concept analysis software dependency networks (Martin 2003), depends turn numbers -called afferent efferent couplings. given package, defined : Afferent Couplings numbers functions packages depend functions within package. Efferent Couplings numbers functions packages package depends . words, Afferent couplings numbers inbound edges packages given package, efferent couplings outbound edges coupling package packages. Respectively denoting afferent efferent couplings \\(n_a\\) \\(n_e\\), coupling instability, \\(\\), defined \\(= n_e / (n_e + n_a)\\). Packages depend many external calls (high efferent couplings), yet upon packages depend (low afferent couplings) thus high coupling instability, packages upon many packages depend, yet depend packages low coupling instability. analyses quantified coupling instability package dependency networks, using total numbers function calls packages, order estimate average coupling instability entire network. also adapted measure coupling instability packages measure internal coupling instability (Almugrin Melton 2015) individual files one package. Packages high internal coupling instability make many calls individual files, packages low instability make calls within single files, relatively fewer .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"statistical-analyses","dir":"Articles","previous_headings":"Methods","what":"Statistical Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"following results depict interpret qualitative trends patterns, without implementing reporting values statistical tests. Data sufficiently large (N > 105,000) ensure reported results entirely significant frequentist terms. two important aspects note regard statistical analyses detailed .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"temporal-analyses","dir":"Articles","previous_headings":"Methods > Statistical Analyses","what":"Temporal Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"following results depict evolution CRAN software time, two main ways: annual developments averaged packages; developments individual packages sequences releases. Several following results accordingly divided corresponding sub-sections “Annual Developments” “Sequential Releases,” respectively referring two modes analysis. Annual developments aggregate values packages year, sequential developments aggregate values sequential release, first versions packages aggregated release sequence one, second versions release sequence two, . Annual developments thus capture collective development system whole, sequential developments capture development individual packages. continuously updated repositories like CRAN, annual developments can captured following two primary ways: considering year represent state CRAN time, thus include latests releases packages year, regardless long ago package may previously updated. Annual estimates derived way referred CRAN snapshots. considering year represent state CRAN terms packages uploaded specific year, disregarding packages uploaded prior years. Estimates derived way referred simply annual values. plausible assumption rates package updates follow kind Poisson-like process, ages packages given time exponentially distributed, analogous distributions waiting times Poisson processes. means values derived using CRAN snapshots generally reflect exponentially-smoothed versions annual values. Many graphical results follow depict results dervied using approaches, : solid lines represent annual values, generally noiser versions dashed lines, represent effectively exponentially-smoothed versions data using CRAN snapshots year. additional interpretations given, solid lines results follow represent annual values, dashed lines represent results derived CRAN shapshots. See Fig. 1A immediately , example. also otherwise mentioned, reported values refer (generally noisier) annual values, values derived (generally smoother) CRAN snapshots.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"distributional-properties-and-mean-values","dir":"Articles","previous_headings":"Methods","what":"Distributional properties and mean values","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Almost statistics described , presented results , approximately log-normally distributed. References following results mean values thus imply values calculated 10^mean(log10(x)). use direct mean values generally alter qualitative conclusions follow, yet resulted many cases less distinct smooth trajectories results.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Many following results reveal pronounced changes broadly centered around 2010. important interpreting results note largest public code hosting platform, GitHub, launched 2008. changes year onward likely influenced increased public accessibility code, discussed .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"metadata","dir":"Articles","previous_headings":"Results","what":"Metadata","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Numbers authors contributors increased time (Fig. 1A), contributors rarely acknowledged prior 2010, increasing average just one acknowledged contributor per package 2021. Numbers unique licenses primarily reflect numbers ways declaring licenses, rather numbers actual licenses (example, “GPL >= 2.0” different “GPL license version 2 higher”, although clearly refer license). Figure 1B shows roughly linear increase license declarations around 2007, followed pronounced drop progression roughly stable range somewhere 50 distinct entries. different ways specifying three versions GPL licenses accounted 83% CRAN packages, second common type license MIT, 9.6%, followed BSD 2.0%. One three classes licenses used 95% CRAN packages. Figure 1. Annual developments metadata package ‘DESCRIPTION’ files. practice translating messages within R packages languages steadily declined recent years (Fig. 2A), suggesting pronounced increase acceptance last 15 years English globally standard language, concomitant decrease active acknowledgement languages. (en@quot translation entry Fig. 2A described R Installation Administration Manual translation , “can used UTF-8 locale American error messages pairs single quotes translated Unicode directional quotes.”) Rates decrease since 2008 equate 1.5% fewer packages per year including translations, total just 20% packages 2008, barely 1% 2021. rates decrease slowed somewhat recent years, extrapolation preceding five years nevertheless suggests practice offering translations effectively disappear end coming year (2023). Figure 2. () Annual frequencies top 10 translations. (B) Annual frequencies top 10 primary URL domains, frequencies GitHub divided 20. Analyses URLs provided package ‘DESCRIPTION’ files clearly reveal abrupt break around 2010 advent online code repositories (Fig. 2B). GitHub always dominated, r-forge declined progressively since around 2015. notable increase emergence rOpenSci provider URL come close within 1/20th popularity GitHub past years.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"package-structure-and-content","dir":"Articles","previous_headings":"Results","what":"Package Structure and Content","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"temporal development numbers files manifest several notable characteristics (Figure 3). Unsurprisingly, R packages always dominated files R/ directory, numbers increased considerably around 2010, generally stabilised mean values around 13-15 files per package (Fig. 3A). /vignettes directory place within R packages numbers files remained relatively constant preceding 20+ years. Packages generally files inst directory prior 2010, increased around 2015, decreasing recently. two sub-directories numbers files increased significantly /src /tests, latter increase particularly distinct, clearly indicating packages become progressively better tested. Figure 3 () Number files different diretories per year (legend panel B). Solid lines represent loess-smoothed interpolations, dashed lines raw annual values (CRAN snapshots). (B) Numbers files function release sequence. Figure 3B shows equivalent changes within individual packages across successive releases. Numbers files generally progressively increase packages mature, especially pronounced increases /R /inst directories, latter somewhat offset around 15 releases decreases src directory. changes /src /inst directories later phases package maturation may reflect restructuring code /src /inst directories order allow cross-compilation packages. Numbers test files generally increase around 15 releases, generally stabilise. directory numbers files notably increase packages mature /vignettes.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"annual-developments","dir":"Articles","previous_headings":"Results > Code Metrics","what":"Annual Developments","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Figure 4 shows temporal evolution number code metrics. Lines Code (“LoC”) primary /R /src sub-directories broadly increased around 2005-2010, time LoC directories slightly decreased, converging just 600 lines /R /src directories. trends broadly reflected LoC per function (Fig. 4B), excepting early years CRAN, functions often well 100 lines , especially /src functions defined languages (years, primarily Fortran C). panel, well Fig. 4C, distinguishes two primary kinds R functions, exported non-exported. LoC per function remained broadly stable almost 20 years, around 30 lines function types languages. slight decrease discernible since around 2015 amounts one LoC less exported, non-exported, /src functions every 3.4, 8.5, 1.5 years, respectively. Total numbers R functions initially increased around 2007, peaking just 30 exported 50 non-exported functions per package (Fig. 4C). Numbers exported R functions decreased since around 17 exported 40-45 non-exported functions per package 2021. Numbers functions defined /src directories followed broadly similar trajectories exported /R functions, slightly decreasing since early 2000’s 30-40 functions. Numbers functions per source file /R /src directories nevertheless progressively decreased since early 2000’s now amount less four /R functions just five /src functions per file (Fig. 4D). Fig. 4 Annual development code metrics.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"sequential-releases","dir":"Articles","previous_headings":"Results > Code Metrics","what":"Sequential Releases","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Figure 5 shows results equivalent Fig. 4, development respective metrics sequential release package, rather annual developments. Lines code generally increase packages mature, mean numbers lines /R directory increasing tenfold 400 first releases 5,000 packages 100 releases. LoC /inst directories also tend increase packages develop, although lesser extent, becoming notable around 50 releases. Beyond first releases, always fewer LoC /src directories /R directories. contrasts annual aggregate results Fig. 4A, suggest LoC /src /R directories around 2007, roughly equal numbers since . difference reflects fact packages one two releases (distribution numbers releases shown , manifests smooth exponential decrease), Fig. 4A dominated packages early state development, LoC /src often exceed numbers /R. Similar patterns /src inst directories Fig. 3B, decreases LoC /src directories later phases package maturation may reflect restructuring code /inst directories. clear peak LoC /src directories may turn suggest approximate number releases developers become aware functionality package /src directories. clearest result Fig. 4A manifest total LoC, increases strikingly linear manner even 100th release package. Fig. 5 Development code metrics per release package. increases LoC nevertheless corresponded general decreases LoC per function increasing numbers releases (Fig. 5B). directories, LoC per function either slightly increased remained generally stable first 50 releases, beyond functions directories clearly become considerably streamlined, LoC decreasing markedly 100th release. Similar aggregate LoC measures panel , LoC /src directories manifest distinct peak packages matured, LoC per /src function peaking slightly earlier (around 40 releases) total LoC (slightly 50). decreases latter portions Fig. 5B nevertheless relatively minor, amount removing one LoC per function every 5, 7, 18 releases exported R, non-exported R, source function, respectively. increasing total measures LoC panel combined decreasing LoC per function panel B must mean functions added packages mature, precisely Fig. 5C reveals. Packages initially contain less ten exported functions average, yet increases 10-fold 130 100th release. Numbers /src functions initially higher, around 20, increase relatively less equivalent /R functions, around 100 100 releases. Numbers non-exported /R functions manifest pronounced increase, 15 times 20 functions initial releases, well 300 100th release. Finally, numbers functions per file show clear trend src code, remaining broadly stable around six functions per file (Fig. 4D). contrast, /R code files begin 3-4 functions per file, increase progressively around eight functions per file 100 releases, context Figs. 4B-C clearly mostly due breaking large non-exported functions multiple, smaller functions. Numbers functions depicted Fig. 4C actually count arbitrary code objects languages contained /src directories, corresponds directly “modules” posited increase according inverse-square “law” software evolution (Turski 1996, 2002; Lehman et al. 1997). defining qualitative feature inverse–square growth initially highly concave form, rates decreasing notably packages mature. trajectories Fig. 4C appear contrast strikingly linear, manifesting trajectories poorly described inverse-square form.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"package-imports-and-exports","dir":"Articles","previous_headings":"Results","what":"Package Imports and Exports","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Like “standard” libraries python language, R core set “base” “recommended” packages. function call networks extracted pkgstats enable counting numbers calls groups packages, well “contributed” packages hosted CRAN.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"annual-developments-1","dir":"Articles","previous_headings":"Results > Package Imports and Exports","what":"Annual Developments","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Figure 6A shows change time proportions calls three groups packages, revealing recent tendency (since around 2015) fewer calls base R functions, 80% function calls early 2000s, 70% previous two years. decrease offset greater numbers calls functions contributed packages, calls recommended packages remained generally stable around 20%. Although calls contributed packages always represented lowest proportion three groups, recent increase nevertheless places almost equal proportion (12%) calls recommended packages (18%). Fig. 6 Dependency networks packages time. () Proportions function calls three categories packages. (B) Coupling instability package funciton calls. (C) Gini coefficients package dependency networks, numbers funciton calls. (D) Aggregate numbers calls makde top ten imported packages. Figure 6B shows “coupling instability” packages time. explained , measure extent packages depend external functionality (efferent couplings) without packages turn depending (afferent couplings). Packages CRAN largely stable around 2010, coupling instability around 0.5, meaning numbers functions package imported packages roughly equal numbers external functions package imported. Instability increased markedly since time, indicating packages become increasingly dependent external functionality, average package less likely provide functionality used packages. coupling instability preceding two years around 80% implies packages make average eight calls packages every two calls made package. another aggregate measure changes package imports, Decan, Mens, Grosjean (2019) analysed Gini coefficients, standardised aggregate differences numbers imports packages. Systems packages import equal numbers dependencies Gini coefficient zero, systems maximally heterogeneous numbers imports Gini coefficient one. concluded Gini coefficients increased time seven package distribution systems studied (including CRAN), least time period 2012-2017, equivalent results depicted Fig. 6C, revealing profound dependence annual values defined calculated. Using “annual values” aggregating statistics packages uploaded year (solid lines) yields Gini coefficients decrease time, calculating annual values “CRAN snapshots” entire system existed year (dashed lines) yields Gini coefficients increase time. results appear qualitative accord “CRAN snapshot” values package dependency networks, although values around half , suggesting perhaps neglected final divisor 2 calculations. Moreover, panel depicts Gini coefficients calculated numbers imported packages, total numbers external function calls. Numbers function calls equal numbers imported packages one function used package, otherwise numbers function calls must greater, leading larger Gini coefficients inequality numbers external function calls packages. expected difference scale, results single-package imports numbers functions qualitatively similar. Finally, figure 6D depicts changes numbers unique function calls package top ten contributed packages, defined ten packages largest total number unique function calls packages throughout history CRAN. top two packages {ggplot2} {dplyr} account 16.6% function calls contributed packages time shown. Numbers function calls shown logarithmic scale, numbers calls packages increasing exponentially 2013 2018, levelling even slightly decreasing.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"sequential-releases-1","dir":"Articles","previous_headings":"Results > Package Imports and Exports","what":"Sequential Releases","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"first two panels Figure 7 show results equivalent Figs 6A-B, changes progressive releases package. Packages tend make progressively fewer calls base R functions mature, although decrease relatively less pronounced overall decrease time Fig. 6A. However, stark contrast Fig 6A, decreases time offset relative increases calls contributed packages, decreases calls base R functions packages mature offset relative increases calls recommended packages, calls contributed packages actually decrease. changes become relatively less pronounced packages mature, stabilising around 50 releases around 75% function calls base R, just 25% contributed packages. Fig. 7 Dependency networks packages sequential releases. () Proportional calls base recommended packages across successive releases. (B) Coupling instability. (C) Average numbers functions package imported packages, averge numbers times packages imported packages. Figure 7B shows average trajectory coupling instability individual packages across depicted numbers sequential releases, decreases progressively packages mature, expected packages increasingly likely imported packages (, incoming afferent couplings increase). figure also shows average numbers efferent couplings, numbers outward calls package packages, stay largely stable packages develop. Increases package stability thus arise packages develop purely imported dependencies increasing numbers packages. turn suggests best way counteract increasing coupling instability CRAN whole depicted Fig. 6B ensure packages remain progressively developed, rather abandoned (archived) releases. Finally, Fig. 7C shows progressions packages individual functions imported packages function release sequence. number packages importing package increases progressively numbers releases, already clear Fig. 7B. Packages less ten releases , average, imported packages, packages 40 releases imported ten packages average. second line figure nevertheless reveals packages import average 1-2 functions given package, numbers functions imported packages increase marginally packages mature. Coupled observed increases numbers exported functions packages mature depicted Fig. 5C, slight increase numbers functions imported packages nevertheless suggests relationship total numbers functions exported package, numbers imported packages. Indeed, taking latest versions packages relating two values reveals packages likely import one additional function average every 2.8 additional functions exported package.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"annual-developments-2","dir":"Articles","previous_headings":"Results > Network Analyses","what":"Annual Developments","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"first two panels Fig. 8 show temporal development CRAN package dependency network, cases revealing network metrics broadly stabilised preceding five years, variations much pronounced prior around 2015. proportion terminal vertices, packages imported packages, remained broadly stable around 55-60% packages. mean vertex degree dependency network nevertheless progressively increased, especially since 2015, indicating packages imported others imported increasing numbers packages (Fig. 8A). Figure 8 Network metrics (-B) CRAN dependency network, (C-D) Function call networks within packages. increase average numbers imports must increase overall connectivity dependency network, Fig. 8B showing concomitant decreases centrality metrics time. Average distances pair packages network increased notably around 2013, time progressively decreased. Since numbers terminal vertices remained generally stable, centrality decreased, initial increase mean distance likely reflects terminal vertices becoming nevertheless away, example network evolving number distinct centres. recent decrease mean distance may reflect equivalent centralisation dependency network. lower two panels Fig. 8 depict evolution function call networks within individual packages. Fig. 8C shows ratio numbers edges numbers vertices, higher values indicating densely connected networks. Since around 2005, network connections within R functions, whether exported , remained largely constant, function called around 5-6 functions. Connections functions /src directories contrast decreased considerably, /src function (object) now “called” (referenced, inherited, method) just one function. Ratios edges vertices full function call network extending directories (including /inst) progressively declined 4 calls per function less 3 recent years. Function call networks form average around three distinct clusters package, peaking 3.5 2007 recently decreasing just 2.5 clusters. final panel (Fig. 8D) shows average centrality metrics function call networks, revealing marked stability, except numbers terminal edges (context, meaning numbers functions call functions), decreased since around 2005 around 12 per package around 7.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"sequential-releases-2","dir":"Articles","previous_headings":"Results > Network Analyses","what":"Sequential Releases","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Analyses sequential releases can meaningfully applied function call networks Figs. 8C-D, Fig. 9 depicts equivalent values two panels. Fig. 9A reveals function call networks tend become densely connected packages mature, /src /R directories. aggregate increase contrasts strikingly equivalent generally decreasing average tendency time Fig. 8C. contrast can explained fact packages one two releases, packages CRAN average become less internally connected time recently-released packages increasingly dominated. decrease package connectivity one year Fig. 8C corresponds equivalent increase Fig. 9A 224 releases, indicating decreases internal connectivity increasing dominance recently-released packages far outweighs compensatory decreases packages maturing. Figure 9 Network metrics function call networks function release sequence. Finally, centrality metrics change dramatically packages mature (Fig. 9B), stark contrast annual changes Fig. 8D. Packages develop greater numbers terminal edges, yet retain almost identical vertex degrees becoming centralised develop. One way effect achieved transforming package several distinct clusters, internally highly connected yet loosely coupled clusters, progressing towards fewer numbers highly centralised clusters, increasing numbers single connections terminal vertices.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"code-formatting-and-documentation","dir":"Articles","previous_headings":"Results","what":"Code formatting and Documentation","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"conclude results analyses generated internal Lines--Code routines pkgstats, along static analyses function documentation (.Rd) files. Proportions blank comment lines remained markedly similar /R /src directories time, except comment lines /R code, increased dramatically since around 2010. roughly corresponds first release roxygen2 package indubitably done package standardise documentation R functions. increase /R documentation likely direct reflection widespread adoption roxygen2 documentation standard R packages. Figure 10. Code formatting documentation. relative proportion white space code lines increased consistently yet slightly time, amounting increase slightly 13% slightly 14.5%. value nevertheless describes average changes every line code, amounts one additional space every 67 code characters. dramatic development Fig. 10B clearly decrease proportion files tab-indentation, well 60% year 2000 barely 10% today. Ignoring tabs, code indentation increased around 2005-2010, remaining constant 3-3.5 spaces many years recently declining well 3 spaces. R function 1998 average six parameters, yet declined rapidly four within two years (Fig. 10C). Numbers parameters progressively increased since , yet still barely exceed average four parameters per function. Parameter documentation followed almost identical trend, increasing 70 characters per parameter just 80. contrast, total numbers documentation lines per function initially increased around 2010, almost 60 lines, decreasing recently 50 lines per function less. equivalent results analysed function release sequence rather year reveal functions become markedly better documented packages mature (Fig. 10D), although additional documentation parameters. Analogous preceding results, recent decrease documentation lines per function likely reflects increasing prevalence recently released packages outweighs increases function documentation individual packages mature. Finally, contrasting panels C D Fig. 10 also reveals likely influence increasing dominance recent packages numbers parameters per function. number increased consistently recent years (Fig. 10C), numbers parameters also decrease markedly packages mature, equating average one parameter fewer functions 58 releases. equivalent annual effect Fig. 10C translate one additional parameter every 46 years. average interval package releases duration CRAN 207 days, according 58 releases take 33 years. comparison suggests effects packages maturing decreasing average numbers parameters per function (still) slightly -competes counteracting effect increasing average numbers parameters per function increasing dominance recently released packages.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"results reveal number metrics appear evolved one direction collectively measured across CRAN packages, yet tend evolve opposing directions within evolution individual packages. example metric “coupling instability” increased markedly packages since around 2010 (Fig. 6B), yet decreases individual package near one first release (due new packages unable used depended packages) near zero around 100 releases. Additional examples arose proportions calls base R functions, collectively decreased time (Fig. 6A), 80 70%, calls contributed packages collectively increased 1% almost 15% 2021. individual packages tend use proportionally fewer calls base R functions mature, also use proportionally fewer calls contributed packages, substitute increasing proportions calls recommended packages (Fig. 7A). Simpler examples also arise variables like numbers R functions per file, decreased consistently CRAN whole (Fig. 4D), yet increase progressively individual packages mature (Fig. 5D). general patterns indicate ubiquity dual dynamic individual packages tending develop evolve one particular direction, yet CRAN whole collectively developing opposing directions due becoming increasingly dominated less mature packages relatively preliminary states development. course generally straightforward many metrics considered determine whether observed trajectory might positive development CRAN whole . example coupling instability nevertheless provides one metric clear understanding, high values generally considered undesirable (Martin 2003). context least, ongoing development CRAN defined dynamic balance stabilising influence mature packages, converse potentially destabilising influences increasing numbers recently contributed packages. However, even balances variables like relatively easy interpret must considered carefully. example, preceding results made several comparisons quantifying relative rates change opposing tendencies. Direct comparisons presume recent packages equal weight influence overall system dynamic mature packages. may appropriate implement form weighted analyses, example, weighting contributions individual packages numbers dependent packages. Although analyses lie beyond scope present work, evident tensions individual collective dynamics represent key finding present work, one extended future analyses considering additional influences weighted contributions individual packages collective development software systems.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"quantifying-temporal-development-of-software-systems","dir":"Articles","previous_headings":"Discussion","what":"Quantifying temporal development of software systems","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"preceding analyses contrasted compared results derived two distinct ways quantifying “annual” statistics. “snapshot” values considered collective properties system existed year, including latest versions packages regardless packages last updated. contrast, “annual” values considered software actively uploaded year. stated outset, snapshot values may generally presumed reflect exponentially-smoothed versions annual values, two approaches aggregating annual values qualitatively agree, snapshots merely effectively smoothed version annual values. assertion can nevertheless never generalisation, particular statistical properties system may manifest different patterns. contrasting patterns arose annual developments Gini coefficients Fig. 6C, presented coefficients inequality numbers package dependencies, numbers individual functions dependencies. Calculating annual values software uploaded year (“annual” values; solid lines figure) yielded Gini coefficients progressively decreased last two decades, using “snapshot” values produced opposing trajectories increasing Gini coefficients (dashed lines). Decan, Mens, Grosjean (2019) previously claimed Gini coefficients seven package distribution systems studied increased time. coefficients measure relative inequality distributions numbers package imports, larger values reflecting systems greater disparities packages numbers imports. Decan, Mens, Grosjean (2019) explicitly describe defined annual figures, data derived “meta-platform” libraries.io, collates software several distribution systems computer languages. Use data platform enable “annual” rather “snapshot” values calculated. present results appear contradict , revealing annual Gini coefficients decreased preceding two decades, rather increasing concluded (albeit case narrow temporal range 2012-2017). Quantifying annual values snapshots entire system, including latest versions prior years, led opposing trajectories increasing Gini coefficients. conflicting patterns prevent firm conclusions regarding temporal evolution Gini coefficients, reveal critical importance precisely specifying methods used aggregate annual values.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"dependency-networks","dir":"Articles","previous_headings":"Discussion","what":"Dependency Networks","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"results Fig. 6C Gini coefficients inequality package dependencies function call networks revealed contrasting patterns dependent annual values aggregated. Gini coefficients calculated sums absolute pairwise differences individual items. package dependencies, example, pairwise differences packages numbers imports, standardised mean number imports scaling coefficient result bounded zero (inequality) one (maximal inequality). discrete, non-negative variables counts, Gini coefficients must generally increase scale maximal values variables.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"future-work","dir":"Articles","previous_headings":"Discussion","what":"Future Work","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"need better data computational statistics statistical computing solutions: certainly, CRAN package repository extremely valuable resource community, gathering analyzing data. Hornik (2012)","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M (2022). pkgstatsAnalyses: Analyses 'pkgstats' Results CRAN Packages. R package version 0.0.1.158, https://github.com/mpadge/pkgstats-analyses.","code":"@Manual{,   title = {pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages},   author = {Mark Padgham},   year = {2022},   note = {R package version 0.0.1.158},   url = {https://github.com/mpadge/pkgstats-analyses}, }"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all releases and dates for all pypi packages ever — all_pypi","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"Extract releases dates pypi packages ever","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"","code":"all_pypi(   chunk_size = 1001,   results_file = \"pypi.Rds\",   data_dir = \"./data-temp\" )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"chunk_size Size chunks parallel job broken. Intermediate results saved chunk. results_file Name file (potentially including path) results saved. data_dir Directory temporary results chunk saved prior final aggregation.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"Nothing (data deposited 'data_dir`).","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"function may stopped time, intermediate results collated collate_temp_pypi_files. Passing name file constructed function results_file re-start analyses left .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"Collate temporary files produced chunked parallel run all_pypi.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"","code":"collate_temp_pypi_files(results_file = \"pypi.Rds\", data_dir = \"./data-temp\")"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"results_file Name file (potentially including path) results saved. data_dir Directory temporary results chunk saved prior final aggregation.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"Collated results, also (re-)saved specified file","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/coupling_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","title":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","text":"Convert raw data (x) data.frame coupling dependencies columns package.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/coupling_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","text":"","code":"coupling_dependencies(x)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/coupling_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","text":"x Result load_pkgstats_data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate afferent and efferent couplings between packages — couplings","title":"Calculate afferent and efferent couplings between packages — couplings","text":"Calculate afferent efferent couplings packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate afferent and efferent couplings between packages — couplings","text":"","code":"couplings(x, year = 2015, summarise = TRUE)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate afferent and efferent couplings between packages — couplings","text":"x Result load_pkgstats_data. year Year coupling data obtained summarise TRUE, convert full data.frame results summary statistics.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate afferent and efferent couplings between packages — couplings","text":"results","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings_releases.html","id":null,"dir":"Reference","previous_headings":"","what":"Get couplings for each release of each package — couplings_releases","title":"Get couplings for each release of each package — couplings_releases","text":"couplings packages calculated release, enable examination changes coupling stability across releases. takes around 15 minutes calculate, worth parallel .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings_releases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get couplings for each release of each package — couplings_releases","text":"","code":"couplings_releases(x)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings_releases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get couplings for each release of each package — couplings_releases","text":"x Result load_pkgstats_data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rates of CRAN archiving — cran_archiving","title":"Plot rates of CRAN archiving — cran_archiving","text":"Plot rates CRAN archiving","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rates of CRAN archiving — cran_archiving","text":"","code":"cran_archiving(datafile = \"pkgstats-results.Rds\")"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rates of CRAN archiving — cran_archiving","text":"datafile Name local file containing CRAN data load","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rates of CRAN archiving — cran_archiving","text":"ggplot2 object (invisibly)","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all dependencies from the ","title":"Extract all dependencies from the ","text":"Extract dependencies \"external_calls\" component main data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all dependencies from the ","text":"","code":"dependencies(x, cran_by_year = TRUE)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all dependencies from the ","text":"x Result load_pkgstats_data. cran_by_year TRUE, calculate dependencies year full snapshot latest CRAN packages year, regardless uploaded. FALSE, calculate annual values packages uploaded year.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all dependencies from the ","text":"list 2 data.frame objects annual rows (1) dependency data, (2) Gini coefficient data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load one lot of either R or python data — load_pkgstats_data","title":"Load one lot of either R or python data — load_pkgstats_data","text":"Load one lot either R python data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load one lot of either R or python data — load_pkgstats_data","text":"","code":"load_pkgstats_data(   datafile = \"pkgstats-results.Rds\",   raw = TRUE,   latest = TRUE )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load one lot of either R or python data — load_pkgstats_data","text":"datafile Name local file containing data load raw FALSE, return tabulated counts packages per month, otherwise return raw data. latest TRUE, return data latest CRAN version package, otherwise return data releases packages.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load one lot of either R or python data — load_pkgstats_data","text":"data file, dates appropriately converted, additional \"month\" column added.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstatsAnalyses-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages — pkgstatsAnalyses-package","title":"pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages — pkgstatsAnalyses-package","text":"Analyses 'pkgstats' Results CRAN Packages.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstatsAnalyses-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages — pkgstatsAnalyses-package","text":"Maintainer: Mark Padgham mark.padgham@email.com","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse individual package trajectories — pkgstats_analyse_packages","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"Analyse individual package trajectories","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"","code":"pkgstats_analyse_packages(datafile)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"datafile Path local pkgstats data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"data.frame annual percentage changes variable followed package.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_submission_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","title":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","text":"Analyse submission rates packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_submission_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","text":"","code":"pkgstats_analyse_submission_rates(datafile)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_submission_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","text":"datafile Path local pkgstats data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_new_vs_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","title":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","text":"Plot time series rates new submissions versus updated packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_new_vs_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","text":"","code":"plot_new_vs_update(   datafile = \"pkgstats-results.Rds\",   bimonthly = FALSE,   start_date = \"2018-01-01\",   type = \"lines\",   lwd = 1 )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_new_vs_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","text":"datafile Name local file containing data load bimonthly TRUE, aggregate data first bimonthly intervals (generally produces nicer looking plot). start_date First date display, set NULL display full range. type Either \"bars\" bar (column) graph, \"lines\" line graph. lwd type = \"lines\" .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series plot for R versus python — plot_r_py","title":"Time series plot for R versus python — plot_r_py","text":"Time series plot R versus python","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series plot for R versus python — plot_r_py","text":"","code":"plot_r_py(   x_r,   x_p,   bimonthly = FALSE,   start_date = \"2018-01-01\",   type = \"bars\",   lwd = 1 )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series plot for R versus python — plot_r_py","text":"x_r CRAN data load load_pkgstats_data using raw = FALSE. x_p pypi data load load_pkgstats_data using raw = FALSE. bimonthly TRUE, aggregate data first bimonthly intervals (generally produces nicer looking plot). start_date First date display, set NULL display full range. type Either \"bars\" bar (column) graph, \"lines\" line graph. lwd type = \"lines\" .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series plot for R versus python — plot_r_py","text":"ggplot2 object (invisibly)","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/recommended_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of current recommended R packages — recommended_pkgs","title":"Get list of current recommended R packages — recommended_pkgs","text":"Get list current recommended R packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/recommended_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of current recommended R packages — recommended_pkgs","text":"","code":"recommended_pkgs()"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/recommended_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of current recommended R packages — recommended_pkgs","text":"Vector names recommended packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Return post-processed summary of coupling data — summarise_coupling_data","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"Return post-processed summary coupling data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"","code":"summarise_coupling_data(x, cran_by_year = TRUE)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"x Result load_pkgstats_data. cran_by_year TRUE, implement annual analyses CRAN existed year; otherwise annual analyses packages uploaded year alone.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"data.frame annual summary statistics coupling instability.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform data to form new variables — transform_pkgstats_data","title":"Transform data to form new variables — transform_pkgstats_data","text":"raw data contain many related raw count variables. function converts many relative proportions.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform data to form new variables — transform_pkgstats_data","text":"","code":"transform_pkgstats_data(x)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform data to form new variables — transform_pkgstats_data","text":"x Result load_pkgstats_data raw = TRUE.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform data to form new variables — transform_pkgstats_data","text":"Transformed version input, variables transformed new variables added.","code":""}]
