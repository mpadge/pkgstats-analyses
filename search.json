[{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"temporal development software studied many decades, commonly development individual pieces software , rarer cases, comparative studies select pieces software (see comprehensive literature reviews Syeed, Hammouda, Syatä 2013; Chahal Saini 2016). Software dependent upon shaped developments packages libraries. computer language associated evolving ecosystem software packages interdependencies. evolution one component ecosystem best studied context evolution ecosystem whole. One focal point historically individual studies software evolution work Lehman et al. (1997), expressed findings series “laws” software evolution. “laws” include , time, software increases complexity functional content (numbers “modules”). laws growth derive Turski (1996), posited empirically observed inverse-square law software growth, later formalised Turski (2002). “laws” software evolution strongly influenced development “Software Mining Analytics” (Mens 2008). field focused elucidating predictors software quality. useful overview provided Allamanis Sutton (2013), identified number research categories within broad field, including one “code statistics.” many computer languages, individual pieces open-source software (“packages”) held distributed centralized package distribution services (Ovens 2018) (“repositories”). curated repositories independently-contributed software exist computer languages including python (Harihareswara 2018), LaTeX (“CTAN” 2021), JavaScript (Goldwater 2020), many others (well operating-system specific repositories described Debian Policy Editors 2021). Package repositories collective properties emerge individual packages interdependencies (Decan, Mens, Claes 2016). Decan, Mens, Grosjean (2019) examined evolution dependency networks seven package distribution systems, including Comprehensive R Archive Network (CRAN). observed Gini coefficient inequality dependent packages increased time systems. CRAN, found numbers packages numbers dependencies increased slowly systems, numbers package updates. also observed “survival probability” (package updated given time) far greater CRAN package ecosystems. rate differed packages without reverse dependencies. also detailed considerations dependency networks individual package distribution systems. Gonzalez-Barahona et al. (2009) showed progressive increases Debian package inter-dependencies. observed increases sizes packages time, claimed reflected laws Lehman et al. (1997). also observed relative sizes packages, measured terms lines code, remained relatively stable across releases. recent analysis “pypi” (Python Package Index) package distribution system python (Bommarito Bommarito 2019) represented comprehensive analysis time single package distribution system computer language, drawn almost two million releases 179,000 packages. size pypi necessarily restricted analyses package metadata, although single metrics package size also included. Moreover, size pypi meant analyses dependency networks also restricted aggregate statistics , analyses internal properties dependency networks . Thus represents exemplary study evolution package distribution system, size system precluded analyses individual pieces software evolve internally, relation aggregate evolution system whole. Compared pypi, CRAN, dominant repository R packages, modest size tractable analysis trends development individual network level. Currently ~140,000 releases approximately 24,000 packages, tenth size pypi. Studies CRAN date largely considered package metadata DESCRIPTION files personal networks package authors. Plakidas, Schall, Zdun (2017) examined metadata DESCRIPTION files, found average R package become dependent packages time, yet less likely depended packages. also revealed high likelihood authors CRAN (BioConductor) packages contributing code packages, although recent developments increased dominance single authors contribute packages. authors examined relationships CRAN software development platforms GitHub (Decan et al. 2015, 2016), revealing GitHub represent “incubator” early-stage code, progression CRAN happening packages reach sufficient maturity. result, CRAN relatively internally-stable, whereas GitHub packages depend CRAN packages, yet way around. Analyses considered individual packages also mostly examined aggregate data sizes packages dependency networks packages. German, Adams, Hassan (2013) compared aggregate statistics base, recommended, contributed packages, found contributed packages grow size faster rate base recommended packages, recommended packages far greater numbers releases. Mora-Cantallops, Sánchez-Alonso, García-Barriocanal (2020) examined metadata DESCRIPTION files, found dependency network packages generally “scale-free”, dominated relatively small number highly-connected packages. also observed individual packages becoming increasingly dependent packages, yet less likely depended . present work builds prior work, drawing analyses entire contents R packages, naturally including DESCRIPTION files, contents code, documentation, testing directories. begin describing {pkgstats} R package, can used generate analyse properties R package code, accompanying publicly-available database code statistics historical CRAN packages. describe trends CRAN package properties history archive, focussing trends four areas: Package metadata (licenses, authorship, translation), internal content structure (file function types sizes), intra-package code structure (function call networks), finally, dependency networks amongst packages. Finally, discuss implications likely drivers trends, potential applications extensions {pkgstats} package database.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Ten years ago, article commemorating “early history R project” ten years prior , Kurt Hornik called considerable concerted community effort … providing R packages compute R packages. developed {pkgstats} package quantify structure content R packages using static code analysis (Papamichail, Diamantopoulos, Symeonidis 2016). package includes function, pkgstats_from_archive(), can applied local mirror CRAN archive collate statistics packages. {pkgstats} generates 95 variables quantifying qualifying package code. full process computationally intensive, published data packages (current previous versions) CRAN , expect update resource regularly. data available pkgstats-CRAN-data set . studied R packages hosted CRAN including historical package versions archived (deprecated) packages. includes R language , defined single “package” referred “base R”. include distinguish “base” package, suite default “recommended” packages, overwhelming majority “contributed” packages (German, Adams, Hassan 2013). analysis ran local mirror CRAN December 2022, comprising 21,089 contributed packages, 112,212 total package versions (average slightly 5 releases per package). paper describe trends variables described four following subsections. {pkgstats} generates well larger superset package-level statistics, full list online documentation.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"package-metadata","dir":"Articles","previous_headings":"Methods","what":"Package metadata","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Package-level metadata largely come Debian Control File (“DCF”) named “DESCRIPTION” (Hornik 2012), packages, contains subset standard DCF fields. extracted: Numbers authors (individuals specified role “aut”); Numbers contributors (individuals specified role “ctb”); Full entries “License” field specifying type license software released; Entries “URL” field specifying one Uniform Resource Locators (URLs) package. also extracted list (human) languages provided R package localization. R packages may include files used translate messages issued code (human) languages. files placed dedicated /po sub-directory, file names prefixed standard prefixes (generally, necessarily, ISO 639-1 codes).","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"lines-of-code-loc","dir":"Articles","previous_headings":"Methods","what":"Lines of Code (LoC)","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"quantified different types source code R packages, using custom C++ tool included {pkgstats} tool produces output similar many common “Lines Code” (LoC) analysis tools tools, plus addition information white space structure: Lines code per (computer) language used package Lines code, comment, blank lines; Characters code lines, along numbers white-space characters, enable metrics proportional white space; Code indentation, including identification tab-indentation. white-space indentation metrics developed enable quantification aspects code outlay design. measure metrics across following subsets code. First, function type: Exported functions intended called users package; Non-exported functions intended called internally functions package. also sub-directories R packages, accord structure structure defined “Writing R Extensions” Manual : /R directory holds source files R language; /src directory holds code languages needs compiled package installation; /inst directory generally holds bundles external code, may also include code used cross-linking compilation, including packages. Cross-linked code must /inst/include sub-directory (explained section “Writing R Extensions” Manual). following analyses consider /inst/include directory, references /inst directory imply sub-directory . Analyses excluded sub-directories within /inst directory. /vignettes directory includes extended documentation. (documentation may also placed /inst/doc folder, ignored .) /tests directory containing test files. /data directory containing data files used implement demonstrate package functionality.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"static-code-analysis","dir":"Articles","previous_headings":"Methods","what":"Static code analysis","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"conducted static code analysis, identifying functions objects R compiled code packages characterize function, package, network level. Static code analysis tools generally work constructing parse trees relate grammar describing one computer languages expression encountered tracing code. important first step “tag” expression, identifying kind expression scope, implying membership either component underlying grammar. {pkgstats} incorporates two open-source libraries code tagging parse tree construction: “Universal ctags” (fork unmaintained “ctags” library, Yamato 2022), “gtags”, part GNU Global library (Tama Communications Corporation 2013). Using jointly enabled us parse R languages used packages, construct “call network” functions languages: “ctags” parses R code “gtags” , “gtags” parses languages. linked results two provide complete coverage. used {pkgstats} tag expression R, src, inst/include directories, providing following data tagged item: tag , name function, variable, object; name path corresponding file; full content expression tag used (text string); kind object (R files, generally function, functionVar variable defined within function, globalVar global variables, objects defined R language; kinds objects can arbitrarily diverse languages); computer language object referenced; start end line numbers file object defined referenced. package, level aggregated values produce: Numbers internal external functions R. Numbers kinds objects languages. Lines--Code function object definition language. References function (object) made functions (objects), including references made functions defined base, recommended, contributed R packages (see network analyses, ) . also parsed R documentation (.Rd) files package using parse_Rd Rd2txt functions “recommended” {tools} package. extracted function R package must corresponding documentation file number parameters function, number documentation characters parameter total length documentation function.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"network-analyses","dir":"Articles","previous_headings":"Methods","what":"Network Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"analyzed two networks within extracted data: inter-package analyses dependency networks packages (akin Decan, Mens, Grosjean 2019), intra-package analyses function call networks extracted “ctags” “gtags” data described .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"inter-package-network-analyses","dir":"Articles","previous_headings":"Methods > Network Analyses","what":"Inter-Package Network Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"‘DESCRIPTION’ files R packages must specify external packages package imports. data can used construct dependency network packages, packages (vertices) connected imports (edges). derived following value package network package dependency networks, calculated {igraph} package (Csardi Nepusz 2006). Numbers packages imported others (terminal vertices) dependency network; Average “-degree” network vertices, average numbers times package imported others; Average betweenness centrality edge, number times edge traversed connecting every package every package network; Network-level degree centrality, measure vertex degree standardised overall size structure network (Freeman 1978). measure overall “size” network average distance pairs vertices. Betweenness centrality provides insight centralised network , higher values reflecting networks connections frequently traverse common, central region. network-level degree centrality reflects extent vertices relatively high -degree; networks networks equal -degree effective centre, degree centrality zero. contrast, networks highly-connected central vertices many vertices low -degree high degree centrality. two centrality metrics provide slightly different insights: betweenness centrality increase extent network manifests single, common centre; degree centrality increase extent networks become centralised general, regardless whether singly identifiable centre forms. Networks low degree centrality readily traversable, generally lower average distances pairs vertices. distance metric offer additional insight. , example, higher independent degree centrality networks extended peripheral connections. Finally, note clusters local network communities considered , dependency networks CRAN packages almost always highly connected largest connected cluster represents 99% network.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"intra-package-network-analyses","dir":"Articles","previous_headings":"Methods","what":"Intra-Package Network Analyses","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"used references generated static code tagging construct “function call network”, references R function functions within packages dependencies, including base recommended packages, contributed packages imported. Functions attributed packages matching function names. Function names R unique, “namespace conflicts” may arise packages implementing different functions name. presumed namespace conflicts commonly arise re-definitions functions initially defined base recommended packages, cases attributed function external contributed package definitions base recommended packages. Intra-package networks also included code languages included /src directories. Function call networks within individual packages commonly structured several distinct clusters, thus numbers clusters provided important first metric intra-package analyses. Intra-package analyses considered following metrics: Ratio numbers edges numbers vertices. Numbers distinct clusters functions objects across languages. betweenness centrality function call network. Numbers terminal vertices (functions call functions). average vertex degree.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"coupling-instability","dir":"Articles","previous_headings":"Methods > Intra-Package Network Analyses","what":"Coupling Instability","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Coupling Instability important concept analysis software dependency networks (Martin 2003), depends turn numbers -called afferent efferent couplings. given package, defined : Afferent Couplings: numbers functions packages depend functions within package. Efferent Couplings: numbers functions packages package depends . words, afferent couplings numbers inbound edges packages given package, efferent couplings outbound edges coupling package packages. Respectively denoting afferent efferent couplings \\(n_a\\) \\(n_e\\), coupling instability, \\(\\), defined \\(= n_e / (n_e + n_a)\\). Packages depend many external calls (high efferent couplings), yet upon packages depend (low afferent couplings) thus high coupling instability, packages upon many packages depend, yet depend packages low coupling instability. analyses quantified coupling instability package dependency networks, using total numbers function calls packages, order estimate average coupling instability entire network. also adapted measure coupling instability packages measure internal coupling instability (Almugrin Melton 2015) individual files one package. Packages high internal coupling instability make many calls individual files, packages low internal instability make calls within single files, relatively fewer .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"temporal-trends","dir":"Articles","previous_headings":"Methods","what":"Temporal Trends","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"report descriptive statistics change measures CRAN software time, focusing two types change: developments across packages CRAN simultaneously, developments individual packages sequences releases. summarize -CRAN developments using two measures: annual values snapshots. Annual values comprised values packages uploaded updated specific year, disregarding packages uploaded previous years yet updated. Snapshots represent values packages CRAN end given year, regardless long ago package may previously updated. general, trends snapshots smoother annual values. figures , solid lines represent annual values dashed lines represent snapshots unless otherwise indicated. values calculated log-distributed, report trends geometric mean values (\\(\\exp\\left[\\frac{1}{n} \\sum_{=1}^n \\ln a_i\\right]\\)). plausible assumption rates package updates follow kind Poisson-like process, ages packages given time exponentially distributed, analogous distributions waiting times Poisson processes. means values derived using CRAN snapshots generally reflect exponentially-smoothed versions annual values. Many graphical results follow depict results derived using approaches, : solid lines represent annual values, generally noisier versions dashed lines, represent effectively exponentially-smoothed versions data using CRAN snapshots year. additional interpretations given, solid lines results follow represent annual values, dashed lines represent results derived CRAN shapshots. See Fig. 1A immediately , example. also otherwise mentioned, reported values refer (generally noisier) annual values, values derived (generally smoother) CRAN snapshots.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"metadata","dir":"Articles","previous_headings":"Results","what":"Metadata","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Numbers authors contributors increased time (Fig. 1A), contributors rarely acknowledged prior 2010. Acknowledgement contributions increased soon average just one acknowledged contributor per package 2022. Encouragingly, recent increases numbers authors contributors broadly linear, show sign slowing . Diversity license declarations increased around 2007, followed pronounced drop progression roughly stable range somewhere 50 distinct entries. Numbers unique licenses primarily reflect numbers ways declaring licenses, rather numbers actual licenses (example, “GPL >= 2.0” different “GPL license version 2 higher”, although clearly refer license). different ways specifying three versions GPL licenses accounted 83% CRAN packages, second common type license MIT, 9.6%, followed BSD 2.0%. One three classes licenses used 95% CRAN packages. Figure 1. Annual developments metadata package ‘DESCRIPTION’ files. practice translating messages within R packages languages steadily declined recent years (Fig. 2A), suggesting pronounced increase acceptance last 15 years English globally standard language, concomitant decrease active acknowledgement languages. (en@quot translation entry translates different quotation styles encodings.) Rates decrease since 2008 equate 1.5% fewer packages per year including translations, total just 20% packages 2008, barely 1% 2021. Rates decrease nevertheless slowed somewhat recent years, use translations appears rise since 2021, perhaps reflecting publication {potools} package facilitate transitions R packages. Figure 2. () Annual frequencies top 10 translations. (B) Annual frequencies top 10 primary URL domains, frequencies GitHub divided 20. top domains URLs provided package ‘DESCRIPTION’ files show rise fall different online homes development, secondary hosting documentation CRAN packages. r-forge reached peak popularity 2013. variety online code repositories began linked around 2010, GitHub reaching dominance 2016. package documentation self-hosted domains, two domains stand : dirk.eddelbuettel.com ropensci.org, though practice hosting documentation GitHub repositories obscures importance individuals groups.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"package-structure-and-content","dir":"Articles","previous_headings":"Results","what":"Package Structure and Content","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"temporal development numbers files manifest several notable characteristics (Figure 3). Unsurprisingly, R packages always dominated files R/ directory, numbers increased considerably around 2010, broadly stabilised mean values around 13-15 files per package (Fig. 3A). /vignettes directory place within R packages numbers files remained relatively constant preceding 20+ years. Packages generally files /inst directory prior 2010, increased around 2015, decreasing recently. two sub-directories numbers files increased significantly /src /tests, latter increase particularly distinct, clearly indicating packages become progressively tested. Figure 3 () Number files different diretories per year (legend panel B). Solid lines represent loess-smoothed interpolations, dashed lines raw annual values (CRAN snapshots). (B) Numbers files function release sequence. Figure 3B shows equivalent changes within individual packages across successive releases. Numbers files generally progressively increase packages mature, especially pronounced increases /R, /inst, /src directories. changes /src /inst directories later phases package maturation may reflect restructuring code /src /inst directories order allow cross-compilation packages. Numbers test files generally increase progressively package maturation. directory numbers files notably increase packages mature /vignettes.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"annual-developments","dir":"Articles","previous_headings":"Results > Code Metrics","what":"Annual Developments","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Figure 4 shows temporal evolution number code metrics. Lines Code (“LoC”) primary /R /src sub-directories increased 2000 2005, time LoC directories slightly decreased, converging just geometric mean just 1,000 lines /R /src directories (Fig. 4A). LoC per function (Fig. 4B) decreased high values early CRAN years stabilize 2005-2020. slight decreases discernible since around 2015 amount one LoC less exported, non-exported, /src functions every 3.4, 8.5, 1.5 years, respectively, trend nevertheless reversed recent two years. Total numbers R functions per package initially increased around 2007, peaking just 30 exported 60 non-exported functions (Fig. 4C). Numbers exported R functions decreased since around 15 exported 25 non-exported functions shortly 2015, since increased current respective values around 20 35. Numbers functions defined /src directories followed broadly similar trajectories exported /R functions. Numbers functions per source file /R /src directories nevertheless generally progressively decreased since early 2000’s now amount less four /R functions just five /src functions per file (Fig. 4D), slight increases discernible since around 2017. Fig. 4 Annual development code metrics.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"sequential-releases","dir":"Articles","previous_headings":"Results > Code Metrics","what":"Sequential Releases","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Figure 5 shows results equivalent Fig. 4, development respective metrics sequential release package, rather annual developments. Lines code generally increase packages mature, mean numbers lines /R directory increasing tenfold 400 first releases 5,000 packages mature beyond 50th release. Beyond first releases, always fewer LoC /src directories /R directories. contrasts annual aggregate results Fig. 4A, suggest LoC /src /R directories sometime 2010, roughly equal numbers since . difference reflects fact packages one two releases (distribution numbers releases shown , manifests smooth exponential decrease), Fig. 4A dominated packages early state development, LoC /src often exceed numbers /R. Similar patterns /src /inst directories Fig. 3B, decreases LoC /src directories later phases package maturation may reflect restructuring code /inst directories. clear peak LoC /src directories may turn suggest approximate number releases developers become aware functionality package /src directories. clearest result Fig. 4A manifest total LoC, increases linear manner even 100th release package. Fig. 5 Development code metrics per release package. increases LoC nevertheless corresponded general decreases LoC per function increasing numbers releases (Fig. 5B). directories, LoC per function either slightly increased remained generally stable first 50 releases, beyond functions directories clearly become considerably streamlined, LoC decreasing markedly 100th release. Measures LoC per function manifest broad peaks directories around 70 releases, decreased, /R /src functions. decreases latter portions Fig. 5B equivalent removing one LoC per function around every 9 releases. increasing total measures LoC panel combined decreasing LoC per function latter part panel B suggests functions added packages mature, precisely Fig. 5C reveals. Packages initially contain less ten exported functions average, yet increases 10-fold around 150 100th release. Numbers /src exported /R functions follow broadly similar trajectories, increasing 20 functions, well 100 time 100th release. Numbers non-exported /R functions manifest pronounced increase, 15 times 20 functions initial releases, well 300 100th release. Finally, numbers functions per file show clear trend src code, remaining broadly stable around 5-6 functions per file (Fig. 4D). contrast, /R code files begin 3-4 functions per file, increase progressively around eight functions per file 100 releases, context Figs. 4B-C clearly mostly due breaking large non-exported functions multiple, smaller functions. Numbers functions depicted Fig. 4C actually count arbitrary code objects languages contained /src directories, corresponds directly “modules” posited increase according inverse-square “law” software evolution (Turski 1996, 2002; Lehman et al. 1997). defining qualitative feature inverse–square growth initially highly concave form, rates decreasing notably packages mature. trajectories Fig. 4C appear contrast strikingly linear, manifesting trajectories poorly described inverse-square form.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"package-imports-and-exports","dir":"Articles","previous_headings":"Results","what":"Package Imports and Exports","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Like “standard” libraries python language, R core set “base” “recommended” packages. function call networks extracted pkgstats enable counting numbers calls groups packages, well “contributed” packages hosted CRAN.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"annual-developments-1","dir":"Articles","previous_headings":"Results > Package Imports and Exports","what":"Annual Developments","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Figure 6A shows change time proportions calls three groups packages, revealing recent tendency (since around 2015) fewer calls base R functions, 80% function calls early 2000s, 70% previous two years. decrease offset greater numbers calls functions contributed packages, calls recommended packages remained generally stable around 20%. Although calls contributed packages always represented lowest proportion three groups, recent increase nevertheless places almost equal proportion (12%) calls recommended packages (18%). Fig. 6 Dependency networks packages time. () Proportions function calls three categories packages. (B) Coupling instability package funciton calls. (C) Gini coefficients package dependency networks, numbers funciton calls. (D) Aggregate numbers calls makde top ten imported packages. Figure 6B shows “coupling instability” packages time. explained , measure extent packages depend external functionality (efferent couplings) without packages turn depending (afferent couplings). Packages CRAN largely stable around 2010, coupling instability around 0.5, meaning numbers functions package imported packages roughly equal numbers external functions package imported. Instability increased markedly since time, indicating packages become increasingly dependent external functionality, average package less likely provide functionality used packages. coupling instability preceding two years around 80% implies packages make average eight calls packages every two calls made package. another aggregate measure changes package imports, Decan, Mens, Grosjean (2019) analysed Gini coefficients, standardised aggregate differences numbers imports packages. Systems packages import equal numbers dependencies Gini coefficient zero, systems maximally heterogeneous numbers imports Gini coefficient one. concluded Gini coefficients increased time seven package distribution systems studied (including CRAN), least time period 2012-2017, equivalent results depicted Fig. 6C, revealing difference annual values defined calculated. Using “annual values” aggregating statistics packages uploaded year (solid lines) yields Gini coefficients decrease time, calculating annual values “CRAN snapshots” entire system existed year (dashed lines) yields Gini coefficients increase time. Decan, Mens, Grosjean (2019)’s results appear qualitative accord “CRAN snapshot” values package dependency networks. Moreover, panel depicts Gini coefficients calculated numbers imported packages, total numbers external function calls qualitatively similar, though differing scale. Finally, figure 6D depicts changes numbers unique function calls package top ten contributed packages, defined ten packages largest total number unique function calls packages throughout history CRAN. top two packages {ggplot2} {dplyr} account 15.2% function calls contributed packages time shown. Numbers function calls shown logarithmic scale, numbers calls packages increasing exponentially, recently levelling even slightly decreasing.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"sequential-releases-1","dir":"Articles","previous_headings":"Results > Package Imports and Exports","what":"Sequential Releases","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"first two panels Figure 7 show results equivalent Figs 6A-B, changes progressive releases package. Packages tend make progressively fewer calls base R functions mature, although decrease relatively less pronounced overall decrease time Fig. 6A. contrast changes packages time, decreases calls base R functions packages mature offset relative increases calls recommended packages. Calls contributed packages actually decrease packages mature. changes become relatively less pronounced successive releases, stabilising around 50 releases around 75% function calls base R, just 25% contributed packages. Fig. 7 Dependency networks packages sequential releases. () Proportional calls base recommended packages across successive releases. (B) Coupling instability. (C) Average numbers functions package imported packages, averge numbers times packages imported packages. Figure 7B shows average trajectory coupling instability individual packages across depicted numbers sequential releases, decreases packages mature. expected packages increasingly likely imported packages. Average numbers efferent couplings (numbers outward calls package packages) stay largely stable packages develop. Increases package stability arise packages develop purely imported dependencies increasing numbers packages. suggests best way counteract increasing coupling instability CRAN whole depicted Fig. 6B ensure packages remain progressively developed, rather abandoned (archived) releases. Finally, Fig. 7C shows progressions packages individual functions imported packages function release sequence. number packages importing package increases progressively numbers releases. Packages less ten releases , average, imported packages, packages 40 releases imported ten packages average. Packages import average 1-2 functions given package, numbers functions imported packages increase marginally packages mature. slight increase numbers functions imported packages nevertheless suggests relationship total numbers functions exported package (Fig. 5C), numbers imported packages. Taking latest versions packages relating two values reveals packages likely import one additional function average every 2.8 additional functions exported package.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"annual-developments-2","dir":"Articles","previous_headings":"Results > Network Analyses","what":"Annual Developments","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"first two panels Fig. 8 show temporal development CRAN package dependency network. network metrics broadly stabilised preceding five years, variations much pronounced prior 2015. proportion terminal vertices, packages imported packages, remained broadly stable around 55-60% packages. mean vertex degree dependency network nevertheless progressively increased, especially since around 2012, indicating packages imported others imported increasing numbers packages (Fig. 8A). Figure 8 Network metrics (-B) CRAN dependency network, (C-D) Function call networks within packages. increase average numbers imports increases overall connectivity dependency network. Fig. 8B showing concomitant decreases centrality metrics time. Average distances pair packages network increased notably around 2013, time decreased. Since numbers terminal vertices remained generally stable, centrality decreased, initial increase mean distance likely reflects terminal vertices becoming away. may reflect network evolving number distinct centres. recent decrease mean distance may reflect equivalent centralisation dependency network. lower two panels Fig. 8 depict evolution function call networks within individual packages. Fig. 8C shows ratio numbers edges numbers vertices, higher values indicating densely connected networks. Since around 2005, network connections within R functions, whether exported , remained largely constant, function called around 5-6 functions. Connections functions /src directories contrast decreased considerably, /src function (object) now “called” (referenced, inherited, method) just one function. Ratios edges vertices full function call network extending directories (including /inst) progressively declined 4 calls per function less 3 recent years. Function call networks form average around three distinct clusters package, peaking 3.5 2007 recently decreasing just 2.5 clusters. final panel (Fig. 8D) shows average centrality metrics function call networks, stable except numbers terminal edges (context, meaning numbers functions call functions), decreased since around 2005 13 per package 10 2015, recently increasing .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"sequential-releases-2","dir":"Articles","previous_headings":"Results > Network Analyses","what":"Sequential Releases","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Analyses sequential releases can meaningfully applied function call networks Figs. 8C-D, Fig. 9 depicts equivalent values two panels. Fig. 9A reveals function call networks tend become densely connected packages mature, /src /R directories. aggregate increase contrasts equivalent generally decreasing average tendency time Fig. 8C. contrast can explained fact packages one two releases, packages CRAN average become less internally connected time recently-released packages increasingly dominated. decrease package connectivity one year Fig. 8C corresponds equivalent increase Fig. 9A 224 releases, indicating decreases internal connectivity increasing dominance recently-released packages far outweighs compensatory decreases packages maturing. Figure 9 Network metrics function call networks function release sequence. Finally, centrality metrics change dramatically packages mature (Fig. 9B), contrast annual changes Fig. 8D. Packages develop greater numbers terminal edges, yet retain almost identical vertex degrees becoming centralised develop. One way effect achieved transforming package several distinct clusters functions, internally highly connected yet loosely coupled clusters, towards fewer numbers highly centralised clusters.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"code-formatting-and-documentation","dir":"Articles","previous_headings":"Results","what":"Code formatting and Documentation","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"conclude results analyses generated internal Lines--Code routines {pkgstats}, along static analyses function documentation (.Rd) files. Proportions blank comment lines remained similar /R /src directories time, except comment lines /R code, increased since around 2010. roughly corresponds first release {roxygen2}m package done package standardise documentation R functions. increase /R documentation likely direct reflection widespread adoption {roxygen2} documentation standard R packages. Figure 10. Code formatting documentation. relative proportion white space code lines increased consistently slightly time, amounting increase slightly 13% slightly 14.5%. value amounts one additional space every 67 code characters. dramatic development Fig. 10B clearly decrease proportion files tab-indentation, well 60% year 2000 barely 10% today. Ignoring tabs, code indentation increased around 2005-2010, remaining constant 3-3.5 spaces many years recently declining well 3 spaces. R function 1998 average six parameters. declined rapidly four within two years (Fig. 10C). Numbers parameters increased since , now exceed average four parameters per function. Parameter documentation followed almost identical trend, increasing 70 characters per parameter 90-100. contrast, total numbers documentation lines per function initially increased around 2010, almost 60 lines, decreasing recently 50 lines per function less. equivalent results analysed function release sequence rather year reveal functions become better documented packages mature (Fig. 10D), although additional documentation parameters. preceding results, recent decrease documentation lines per function likely reflects increasing prevalence recently released packages outweighs increases function documentation individual packages mature. Finally, contrasting Figs. 10C 10D show likely show increasing dominance recent packages numbers parameters per function. number increased recent years (Fig. 10C), numbers parameters also decrease packages mature, equating average one parameter fewer functions 58 releases. equivalent annual effect (Fig. 10C) translate one additional parameter every 46 years. average interval package releases duration CRAN 207 days, according 58 releases take 33 years. comparison suggests effects packages maturing decreasing average numbers parameters per function (still) slightly -paces effect increasing average numbers parameters per function increasing dominance recently released packages.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"results reveal number metrics appear evolved one direction collectively measured across CRAN packages, yet tend evolve opposing directions within evolution individual packages. example metric “coupling instability” increased markedly packages since around 2010 (Fig. 6B), yet decreases individual package near one first release (due new packages unable used depended packages) near zero around 100 releases. Additional examples arose proportions calls base R functions, collectively decreased time (Fig. 6A), 80 70%, calls contributed packages collectively increased 1% almost 15% 2022 individual packages tend use proportionally fewer calls base R functions mature, also use proportionally fewer calls contributed packages, substitute increasing proportions calls recommended packages (Fig. 7A). Simpler examples also arise variables like numbers R functions per file, decreased consistently CRAN whole (Fig. 4D), yet increase progressively individual packages mature (Fig. 5D). general patterns indicate ubiquity dual dynamic individual packages tending develop evolve one particular direction, yet CRAN whole collectively developing opposing directions due becoming increasingly dominated less mature packages relatively preliminary states development. course generally straightforward many metrics considered determine whether observed trajectory might positive development CRAN whole . example coupling instability nevertheless provides one metric clear understanding, high values generally considered undesirable (Martin 2003). context least, ongoing development CRAN defined dynamic balance stabilising influence mature packages, converse potentially destabilising influences increasing numbers recently contributed packages. Even balances variables like relatively easy interpret must considered carefully. example, preceding results made several comparisons quantifying relative rates change opposing tendencies. Direct comparisons presume recent packages equal weight influence overall system dynamic mature packages. may appropriate implement form weighted analyses, example, weighting contributions individual packages numbers dependent packages. point considered concluding section .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"the-influence-of-code-hosting-platforms","dir":"Articles","previous_headings":"Discussion","what":"The Influence of Code-Hosting Platforms","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Many results presented manifest distinct temporal changes around year 2010 onwards, year two establishment online code-hosting platforms GitHub, GitLab, Bitbucket (Source Code Hosting 2022). synchronous advent platforms Fig. 1B increases acknowledged contributors since 2010 Fig. 1A provides suggestive evidence ability collaboratively develop disseminate code platforms led increase public acknowledgement source code contributions. Encouragingly, increases since around 2012 roughly linear, show sign slowing . GitHub dominant platform far, generally accounting close order magnitude URL entries equivalent git-based platforms Bitbucket GitLab. recent decrease GitHub URLs top ten shown Fig. 2B slightly offset increase rOpenSci URLs. rOpenSci provides peer-review service R packages, generally improving code quality publicising packages wider audience might otherwise reached authors’ GitHub profile pages. increases GitHub rOpenSci URLs reflect increased community engagement ongoing development R packages. increased engagement may generally viewed positive, increased public awareness peoples code facilitated code hosting platforms also seems produced increased dependence R packages R packages. Coupling instability packages increased markedly since 2010 (Fig. 6B). (less clear patterns Gini coefficients equality dependency networks discussed .) Several network metrics Fig. 8 also generally reveal abrupt transitions around 2012. proportion packages imported others increased abruptly (Fig. 8A), although seems stabilised recently, around 60-70% packages. increase vertex degree also shown panel nevertheless increased progressively, increasing slower rate recently. mentioned, increases must mean package imported packages imported increasing number times. additional network metrics Fig. 8B (network centrality, mean inter-nodal distance) manifest generally progressive linear trajectories around 2013, following largely stabilised. initial phase prior time marked decreasing centrality alongside increasing inter-nodal distances, suggestive de-centralising network. trajectory, advent code hosting platforms clearly stabilising effect “re-centralising” CRAN dependency network, decreasing inter-nodal distances.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"quantifying-the-temporal-development-of-software-systems","dir":"Articles","previous_headings":"Discussion","what":"Quantifying the temporal development of software systems","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"calculated two measures temporal development software CRAN. “Snapshot” values considered collective properties system existed year, including latest versions packages regardless packages last updated. “Annual” values considered software uploaded year. Snapshot values may generally presumed reflect exponentially-smoothed versions annual values, two approaches aggregating annual values qualitatively agree. Nonetheless, distinct differences appear comparing two approaches. differences appear annual change Gini coefficients Fig. 6C, presented coefficients inequality numbers package dependencies, numbers individual functions dependencies. Calculating annual values software uploaded year (“annual” values; solid lines figure) yielded Gini coefficients decreased last two decades, using “snapshot” values produced opposing trajectories increasing Gini coefficients (dashed lines). Decan, Mens, Grosjean (2019) claimed Gini coefficients seven package distribution systems studied increased time. coefficients measure relative inequality distributions numbers package imports, larger values reflecting systems greater disparities packages numbers imports. Decan, Mens, Grosjean (2019) explicitly describe defined annual figures, data derived “meta-platform” libraries.io, collates software several distribution systems computer languages. Use data platform enable “annual” rather “snapshot” values calculated. discrete, non-negative variables counts, Gini coefficients must generally increase scale maximal values variables. Thus average numbers imported packages (functions) increases time, Gini coefficients. suggests observations increasing Gini coefficients interpreted cautiously, may merely reflect uniformly increasing dependence external packages, observations decreasing Gini coefficients, “snapshot” values, may reflect genuine changes. Whatever underlying cause observed differences, clearly reveal critical importance precisely specifying methods used aggregate annual values. Whatever underlying cause observed differences, clearly reveal critical importance precisely specifying methods used aggregate annual values.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/articles/pkgstats.html","id":"collective-versus-individual-software-evolution","dir":"Articles","previous_headings":"Discussion > Quantifying the temporal development of software systems","what":"Collective versus individual software evolution","title":"Historical Trends in R Package Structure and Interdependency on CRAN","text":"Beyond methods used aggregate annual values, results reveal striking contrasts collective evolution CRAN unified software ecosystem, development trajectories individual packages. Consider, example, Fig. 3 showing numbers files. manifest clearly increasing trajectories lifetimes individual packages, yet trajectories CRAN whole far less clear, mixing increases decreases , non-linear patterns. clear insight emerges two panels figure metric provides direct insight evolution individual packages. Given foregoing discussions increasing dominance time newer relatively less mature packages CRAN, annual developments Fig. 3A may indeed reflect nothing confounding individually-increasing numbers files mature packages mixed increasing numeric dominance less mature packages system whole. results Fig. 4D (decreasing numbers functions per file per year) 5D (increasing numbers functions per file per release) clearly reflect opposing trajectories, intermediate results initially increasing annual numbers functions followed subsequent decreases (Fig. 4C) must presumed reflect dynamic balance trajectories individual packages (clear increases Fig. 5C) increasing dominance newer packages. many aspects results clearly indicate temporal evolution collective software systems can understood alongside equivalent understanding temporal evolution individual packages. Collective properties alone inadequate understand software system actually evolved. Moreover, future work likely consider contrast schemes weighting relative contributions different packages software ecosystem whole. present results applied uniform weights packages, regardless whether individual package 100 lines code never updated even downloaded, whether thousands lines code orders magnitude downloads. Deriving applying weighting schemes extremely difficult endeavour, especially can never single, optimal scheme , reported results intimately dependent chosen weighting scheme. hope present work provides firm empirical basis begin task developing schemes order understanding evolution software ecosystems. conclusion, return started, initial consideration “packages compute R packages” (Hornik 2012), need better data computational statistics statistical computing solutions: certainly, CRAN package repository extremely valuable resource community, gathering analyzing data. study demonstrated comparably unique nature CRAN, centralised archived, indeed ensure represents extremely valuable resource. hope present study represents intermediate milestone journey first hinted one decade ago attempts delve deeper wealth data provided CRAN.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M (2022). pkgstatsAnalyses: Analyses 'pkgstats' Results CRAN Packages. R package version 0.1.0.026, https://github.com/mpadge/pkgstats-analyses.","code":"@Manual{,   title = {pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages},   author = {Mark Padgham},   year = {2022},   note = {R package version 0.1.0.026},   url = {https://github.com/mpadge/pkgstats-analyses}, }"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all releases and dates for all pypi packages ever — all_pypi","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"Extract releases dates pypi packages ever","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"","code":"all_pypi(   chunk_size = 1001,   results_file = \"pypi.Rds\",   data_dir = \"./data-temp\" )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"chunk_size Size chunks parallel job broken. Intermediate results saved chunk. results_file Name file (potentially including path) results saved. data_dir Directory temporary results chunk saved prior final aggregation.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"Nothing (data deposited 'data_dir`).","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/all_pypi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract all releases and dates for all pypi packages ever — all_pypi","text":"function may stopped time, intermediate results collated collate_temp_pypi_files. Passing name file constructed function results_file re-start analyses left .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"Collate temporary files produced chunked parallel run all_pypi.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"","code":"collate_temp_pypi_files(results_file = \"pypi.Rds\", data_dir = \"./data-temp\")"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"results_file Name file (potentially including path) results saved. data_dir Directory temporary results chunk saved prior final aggregation.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/collate_temp_pypi_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate all temporary files produced by the chunked parallel run of\nall_pypi. — collate_temp_pypi_files","text":"Collated results, also (re-)saved specified file","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/coupling_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","title":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","text":"Convert raw data (x) data.frame coupling dependencies columns package.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/coupling_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","text":"","code":"coupling_dependencies(x)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/coupling_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw data (x) into data.frame of coupling dependencies as from\nand to columns for each package. — coupling_dependencies","text":"x Result load_pkgstats_data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate afferent and efferent couplings between packages — couplings","title":"Calculate afferent and efferent couplings between packages — couplings","text":"Calculate afferent efferent couplings packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate afferent and efferent couplings between packages — couplings","text":"","code":"couplings(x, year = 2015, summarise = TRUE)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate afferent and efferent couplings between packages — couplings","text":"x Result load_pkgstats_data. year Year coupling data obtained summarise TRUE, convert full data.frame results summary statistics.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate afferent and efferent couplings between packages — couplings","text":"results","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings_releases.html","id":null,"dir":"Reference","previous_headings":"","what":"Get couplings for each release of each package — couplings_releases","title":"Get couplings for each release of each package — couplings_releases","text":"couplings packages calculated release, enable examination changes coupling stability across releases. takes around 15 minutes calculate, worth parallel .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings_releases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get couplings for each release of each package — couplings_releases","text":"","code":"couplings_releases(x)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/couplings_releases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get couplings for each release of each package — couplings_releases","text":"x Result load_pkgstats_data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rates of CRAN archiving — cran_archiving","title":"Plot rates of CRAN archiving — cran_archiving","text":"Plot rates CRAN archiving","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rates of CRAN archiving — cran_archiving","text":"","code":"cran_archiving(datafile = \"pkgstats-results.Rds\")"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rates of CRAN archiving — cran_archiving","text":"datafile Name local file containing CRAN data load","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/cran_archiving.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rates of CRAN archiving — cran_archiving","text":"ggplot2 object (invisibly)","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all dependencies from the ","title":"Extract all dependencies from the ","text":"Extract dependencies \"external_calls\" component main data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all dependencies from the ","text":"","code":"dependencies(x, cran_by_year = TRUE)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all dependencies from the ","text":"x Result load_pkgstats_data. cran_by_year TRUE, calculate dependencies year full snapshot latest CRAN packages year, regardless uploaded. FALSE, calculate annual values packages uploaded year.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all dependencies from the ","text":"list 2 data.frame objects annual rows (1) dependency data, (2) Gini coefficient data.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load one lot of either R or python data — load_pkgstats_data","title":"Load one lot of either R or python data — load_pkgstats_data","text":"Load one lot either R python data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load one lot of either R or python data — load_pkgstats_data","text":"","code":"load_pkgstats_data(   datafile = \"pkgstats-results.Rds\",   raw = TRUE,   latest = TRUE )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load one lot of either R or python data — load_pkgstats_data","text":"datafile Name local file containing data load raw FALSE, return tabulated counts packages per month, otherwise return raw data. latest TRUE, return data latest CRAN version package, otherwise return data releases packages.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/load_pkgstats_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load one lot of either R or python data — load_pkgstats_data","text":"data file, dates appropriately converted, additional \"month\" column added.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstatsAnalyses-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages — pkgstatsAnalyses-package","title":"pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages — pkgstatsAnalyses-package","text":"Analyses 'pkgstats' Results CRAN Packages.","code":""},{"path":[]},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstatsAnalyses-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pkgstatsAnalyses: Analyses of 'pkgstats' Results for all CRAN Packages — pkgstatsAnalyses-package","text":"Maintainer: Mark Padgham mark.padgham@email.com","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse individual package trajectories — pkgstats_analyse_packages","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"Analyse individual package trajectories","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"","code":"pkgstats_analyse_packages(datafile)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"datafile Path local pkgstats data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse individual package trajectories — pkgstats_analyse_packages","text":"data.frame annual percentage changes variable followed package.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_submission_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","title":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","text":"Analyse submission rates packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_submission_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","text":"","code":"pkgstats_analyse_submission_rates(datafile)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/pkgstats_analyse_submission_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse submission rates of packages — pkgstats_analyse_submission_rates","text":"datafile Path local pkgstats data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_new_vs_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","title":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","text":"Plot time series rates new submissions versus updated packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_new_vs_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","text":"","code":"plot_new_vs_update(   datafile = \"pkgstats-results.Rds\",   bimonthly = FALSE,   start_date = \"2018-01-01\",   type = \"lines\",   lwd = 1 )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_new_vs_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series of rates of new submissions versus updated packages — plot_new_vs_update","text":"datafile Name local file containing data load bimonthly TRUE, aggregate data first bimonthly intervals (generally produces nicer looking plot). start_date First date display, set NULL display full range. type Either \"bars\" bar (column) graph, \"lines\" line graph. lwd type = \"lines\" .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series plot for R versus python — plot_r_py","title":"Time series plot for R versus python — plot_r_py","text":"Time series plot R versus python","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series plot for R versus python — plot_r_py","text":"","code":"plot_r_py(   x_r,   x_p,   bimonthly = FALSE,   start_date = \"2018-01-01\",   type = \"bars\",   lwd = 1 )"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series plot for R versus python — plot_r_py","text":"x_r CRAN data load load_pkgstats_data using raw = FALSE. x_p pypi data load load_pkgstats_data using raw = FALSE. bimonthly TRUE, aggregate data first bimonthly intervals (generally produces nicer looking plot). start_date First date display, set NULL display full range. type Either \"bars\" bar (column) graph, \"lines\" line graph. lwd type = \"lines\" .","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/plot_r_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series plot for R versus python — plot_r_py","text":"ggplot2 object (invisibly)","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/recommended_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of current recommended R packages — recommended_pkgs","title":"Get list of current recommended R packages — recommended_pkgs","text":"Get list current recommended R packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/recommended_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of current recommended R packages — recommended_pkgs","text":"","code":"recommended_pkgs()"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/recommended_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of current recommended R packages — recommended_pkgs","text":"Vector names recommended packages","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Return post-processed summary of coupling data — summarise_coupling_data","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"Return post-processed summary coupling data","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"","code":"summarise_coupling_data(x, cran_by_year = TRUE)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"x Result load_pkgstats_data. cran_by_year TRUE, implement annual analyses CRAN existed year; otherwise annual analyses packages uploaded year alone.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/summarise_coupling_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return post-processed summary of coupling data — summarise_coupling_data","text":"data.frame annual summary statistics coupling instability.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform data to form new variables — transform_pkgstats_data","title":"Transform data to form new variables — transform_pkgstats_data","text":"raw data contain many related raw count variables. function converts many relative proportions.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform data to form new variables — transform_pkgstats_data","text":"","code":"transform_pkgstats_data(x)"},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform data to form new variables — transform_pkgstats_data","text":"x Result load_pkgstats_data raw = TRUE.","code":""},{"path":"https://mpadge.github.io/pkgstats-analyses/reference/transform_pkgstats_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform data to form new variables — transform_pkgstats_data","text":"Transformed version input, variables transformed new variables added.","code":""}]
